{"ast":null,"code":"var _jsxFileName = \"/Users/fresh/Desktop/Projects/AbdulM95/react-overhaul-undercontruction/src/Components/Database/Database.jsx\";\nimport '../../css/database.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Database = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"database-section padding-box\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"skill-heading database\",\n      children: \"Relational/Non-Relational Databases\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"sql-paragraph\",\n      children: \"In the world of databases, there are two man families: Relational and Non-Relational. I am comfortable in working with both.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"sql-heading\",\n      children: \"SQL - Structured Query Language\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"sql-paragraph sql-first\",\n      children: \"SQL allows users to create, insert, read, update, and delete data and/or objects from the database. SQL works with Relational databases only.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"sql-paragraph\",\n      children: \"I am familiar with SQL subsets such as DDL (Data Definition Language), DML (Data Manipulation Language), and TCL (Transaction Control Language). I know different types of objects such as Constraints, Sequences, Indexes, etc.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"sql-heading\",\n      children: \"MONGODB\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"sql-paragraph sql-first\",\n      children: \"MONGODB is the Non-Relational Database equivalent of SQL. Making use of collections which store multiple documents constructed in JSON. Essentially, key-value pairs specifying a record. It does not enforce a schema like SQL does.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"sql-paragraph\",\n      children: \"I LOVE working with JSON. It is simple to understand and makes MONGODB the popular choice when JavaScript is the only language for the stack.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Database;\nexport default Database;\n\nvar _c;\n\n$RefreshReg$(_c, \"Database\");","map":{"version":3,"sources":["/Users/fresh/Desktop/Projects/AbdulM95/react-overhaul-undercontruction/src/Components/Database/Database.jsx"],"names":["Database"],"mappings":";AAAA,OAAO,wBAAP;;;AAEA,MAAMA,QAAQ,GAAG,MAAM;AAEnB,sBACI;AAAK,IAAA,SAAS,EAAC,8BAAf;AAAA,4BACQ;AAAI,MAAA,SAAS,EAAC,wBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADR,eAEQ;AAAG,MAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFR,eAGQ;AAAI,MAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHR,eAIQ;AAAG,MAAA,SAAS,EAAC,yBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJR,eAKQ;AAAG,MAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALR,eAMQ;AAAI,MAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANR,eAOQ;AAAG,MAAA,SAAS,EAAC,yBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPR,eAQQ;AAAG,MAAA,SAAS,EAAC,eAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CAdD;;KAAMA,Q;AAgBN,eAAeA,QAAf","sourcesContent":["import '../../css/database.css';\n\nconst Database = () => {\n\n    return (\n        <div className=\"database-section padding-box\">\n                <h1 className=\"skill-heading database\">Relational/Non-Relational Databases</h1>\n                <p className=\"sql-paragraph\">In the world of databases, there are two man families: Relational and Non-Relational. I am comfortable in working with both.</p>\n                <h5 className=\"sql-heading\">SQL - Structured Query Language</h5> \n                <p className=\"sql-paragraph sql-first\">SQL allows users to create, insert, read, update, and delete data and/or objects from the database. SQL works with Relational databases only.</p>\n                <p className=\"sql-paragraph\">I am familiar with SQL subsets such as DDL (Data Definition Language), DML (Data Manipulation Language), and TCL (Transaction Control Language). I know different types of objects such as Constraints, Sequences, Indexes, etc.</p>\n                <h5 className=\"sql-heading\">MONGODB</h5> \n                <p className=\"sql-paragraph sql-first\">MONGODB is the Non-Relational Database equivalent of SQL. Making use of collections which store multiple documents constructed in JSON. Essentially, key-value pairs specifying a record. It does not enforce a schema like SQL does.</p>\n                <p className=\"sql-paragraph\">I LOVE working with JSON. It is simple to understand and makes MONGODB the popular choice when JavaScript is the only language for the stack.</p>\n        </div>\n    )\n}\n\nexport default Database;"]},"metadata":{},"sourceType":"module"}