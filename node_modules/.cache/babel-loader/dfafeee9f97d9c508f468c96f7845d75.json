{"ast":null,"code":"import'../../css/database.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Database=function Database(){return/*#__PURE__*/_jsxs(\"div\",{className:\"database-section padding-box\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"skill-heading database\",children:\"Relational/Non-Relational Databases\"}),/*#__PURE__*/_jsx(\"p\",{className:\"sql-paragraph\",children:\"In the world of databases, there are two man families: Relational and Non-Relational. I am comfortable in working with both.\"}),/*#__PURE__*/_jsx(\"h5\",{className:\"sql-heading\",children:\"SQL - Structured Query Language\"}),/*#__PURE__*/_jsx(\"p\",{className:\"sql-paragraph sql-first\",children:\"SQL allows users to create, insert, read, update, and delete data and/or objects from the database. SQL works with Relational databases only.\"}),/*#__PURE__*/_jsx(\"p\",{className:\"sql-paragraph\",children:\"I am familiar with SQL subsets such as DDL (Data Definition Language), DML (Data Manipulation Language), and TCL (Transaction Control Language). I know different types of objects such as Constraints, Sequences, Indexes, etc.\"}),/*#__PURE__*/_jsx(\"h5\",{className:\"sql-heading\",children:\"MONGODB\"}),/*#__PURE__*/_jsx(\"p\",{className:\"sql-paragraph sql-first\",children:\"MONGODB is the Non-Relational Database equivalent of SQL. Making use of collections which store multiple documents constructed in JSON. Essentially, key-value pairs specifying a record. It does not enforce a schema like SQL does.\"}),/*#__PURE__*/_jsx(\"p\",{className:\"sql-paragraph\",children:\"I LOVE working with JSON. It is simple to understand and makes MONGODB the popular choice when JavaScript is the only language for the stack.\"})]});};export default Database;","map":{"version":3,"sources":["/Users/fresh/Desktop/Projects/AbdulM95/react-overhaul-undercontruction/src/Components/Database/Database.jsx"],"names":["Database"],"mappings":"AAAA,MAAO,wBAAP,C,wFAEA,GAAMA,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CAEnB,mBACI,aAAK,SAAS,CAAC,8BAAf,wBACQ,WAAI,SAAS,CAAC,wBAAd,iDADR,cAEQ,UAAG,SAAS,CAAC,eAAb,0IAFR,cAGQ,WAAI,SAAS,CAAC,aAAd,6CAHR,cAIQ,UAAG,SAAS,CAAC,yBAAb,2JAJR,cAKQ,UAAG,SAAS,CAAC,eAAb,8OALR,cAMQ,WAAI,SAAS,CAAC,aAAd,qBANR,cAOQ,UAAG,SAAS,CAAC,yBAAb,mPAPR,cAQQ,UAAG,SAAS,CAAC,eAAb,2JARR,GADJ,CAYH,CAdD,CAgBA,cAAeA,CAAAA,QAAf","sourcesContent":["import '../../css/database.css';\n\nconst Database = () => {\n\n    return (\n        <div className=\"database-section padding-box\">\n                <h1 className=\"skill-heading database\">Relational/Non-Relational Databases</h1>\n                <p className=\"sql-paragraph\">In the world of databases, there are two man families: Relational and Non-Relational. I am comfortable in working with both.</p>\n                <h5 className=\"sql-heading\">SQL - Structured Query Language</h5> \n                <p className=\"sql-paragraph sql-first\">SQL allows users to create, insert, read, update, and delete data and/or objects from the database. SQL works with Relational databases only.</p>\n                <p className=\"sql-paragraph\">I am familiar with SQL subsets such as DDL (Data Definition Language), DML (Data Manipulation Language), and TCL (Transaction Control Language). I know different types of objects such as Constraints, Sequences, Indexes, etc.</p>\n                <h5 className=\"sql-heading\">MONGODB</h5> \n                <p className=\"sql-paragraph sql-first\">MONGODB is the Non-Relational Database equivalent of SQL. Making use of collections which store multiple documents constructed in JSON. Essentially, key-value pairs specifying a record. It does not enforce a schema like SQL does.</p>\n                <p className=\"sql-paragraph\">I LOVE working with JSON. It is simple to understand and makes MONGODB the popular choice when JavaScript is the only language for the stack.</p>\n        </div>\n    )\n}\n\nexport default Database;"]},"metadata":{},"sourceType":"module"}